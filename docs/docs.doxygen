/*
 * MIT License
 *
 * Copyright (c) 2024 Giovanni Santini
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

// vim: set filetype=cpp :
/// 
/// \mainpage tenno-tl documentation
///
/// Welcome to the tenno-tl documentation. This is a C++ library that provides
/// utilities for memory management, algorithms, and threading. The library is
/// header-only and requires a C++17 compliant compiler, and C++20 for advanced
/// constexpr features.
///
/// > Note: The library is currently in developement and is not ready for production.
///
/// ## Design goals
///
/// The library is designed with the following goals in mind:
///
/// - exceptions are NEVER thrown, instead values are returned as optional or expected
/// - constexpr functions and data structures
/// - thread-safe data structures
/// - modern-looking and readable c++ code
/// - performance
///
/// ## Features
///
/// The library aims to provide thread safe / constexpr containers
/// and algorithms that are not provided by the standard library,
/// currently the library provides the following features:
/// - `tenno::array` a fixed-size array with constexpr support
/// - `tenno::shared_ptr` shared pointer implementation
/// - `tenno::unique_ptr` unique pointer implementation
/// - `tenno::make_shared` make shared pointer with variadic arguments
/// - `tenno::make_unique` make unique pointer with variadic arguments
/// - `tenno::vector` a vector implementation
/// - `tenno::optional` an optional type
/// - `tenno::expected` an expected type
/// - `tenno::atomic` atomic operations
/// - `tenno::mutex` a mutex implementation
/// - `tenno::lock_guard` a lock guard implementation
/// - `tenno::jthread` a joinable thread implementation
///
/// And lots of other utilities and algorithms like:
/// - tenno::range
/// - tenno::error
/// - tenno::copy
/// - tenno::for_each
/// - tenno::accumulate
/// - tenno::swap
/// - tenno::move
/// - tenno::allocate_shared
/// - tenno::allocator
/// - tenno::default_delete
/// - tenno::reference_wrapper
///
/// You can browse the API documentation for more details.
